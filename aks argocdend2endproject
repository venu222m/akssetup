1.EKS SETUP
aks setupss; manuvally
select rg
region west us 2
cluster name 
agent pool recommnand agent defauls
edit min1 max2 node pool range
edit 50pod per node
edit public ip of node enable
2. azure cli connect aks cluster
venu [ ~ ]$ az aks get-credentials --resource-group MyResourceGroup --name azuredevops
Merged "azuredevops" as current context in /home/venu/.kube/config

venu [ ~ ]$ kubectl get nodes
NAME                                STATUS   ROLES    AGE     VERSION
aks-agentpool-38600080-vmss000000   Ready    <none>   15m     v1.32.6
aks-np2-51532181-vmss000000         Ready    <none>   5m39s   v1.32.6


ArgoCD Setup on Azure AKS â€“ Step-by-Step
ðŸ”§ Pre-requisites:
Azure CLI installed (az)

kubectl configured

AKS cluster already provisioned

Helm installed

GitHub repo with Kubernetes manifests (for ArgoCD to deploy)

ðŸ§© Step 1: Login to Azure and Set Context
bash
Copy
Edit
az login
az account set --subscription "<your-subscription-id>"

# Get AKS credentials
az aks get-credentials --resource-group <your-rg> --name <your-aks-cluster-name>
ðŸ§© Step 2: Create a Namespace for ArgoCD
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
ðŸ’¡ This installs the latest stable version of ArgoCD in the argocd namespace.
venu [ ~ ]$ kubectl get pods -n argocd 
NAME                                                READY   STATUS    RESTARTS   AGE
argocd-application-controller-0                     1/1     Running   0          2m11s
argocd-applicationset-controller-6ff6f74bc9-hlrfn   1/1     Running   0          2m15s
argocd-dex-server-558dc4bd7b-jkjrp                  1/1     Running   0          2m14s
argocd-notifications-controller-9977b5bd6-68bx9     1/1     Running   0          2m14s
argocd-redis-6594484976-45h56                       1/1     Running   0          2m13s
argocd-repo-server-845d4f5c49-xsw9h                 1/1     Running   0          2m12s
argocd-server-59d75f4c95-xgddg                      1/1     Running   0          2m11s

ðŸ§© Step 4: Expose ArgoCD UI (Option 1: Port-forward for nodeport)
venu [ ~ ]$ kubectl get svc -n argocd
NAME                                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE
argocd-applicationset-controller          ClusterIP   10.0.120.123   <none>        7000/TCP,8080/TCP            5m29s
argocd-dex-server                         ClusterIP   10.0.87.159    <none>        5556/TCP,5557/TCP,5558/TCP   5m28s
argocd-metrics                            ClusterIP   10.0.211.65    <none>        8082/TCP                     5m28s
argocd-notifications-controller-metrics   ClusterIP   10.0.36.208    <none>        9001/TCP                     5m27s
argocd-redis                              ClusterIP   10.0.234.25    <none>        6379/TCP                     5m26s
argocd-repo-server                        ClusterIP   10.0.144.79    <none>        8081/TCP,8084/TCP            5m25s
argocd-server                             ClusterIP   10.0.182.54    <none>        80/TCP,443/TCP               5m25s   default cluster ip swith to nodeport
argocd-server-metrics                     ClusterIP   10.0.209.170   <none>        8083/TCP                     5m24s
apply this command
venu [ ~ ]$ kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
service/argocd-server patched
venu [ ~ ]$ kubectl get svc -n argocd
NAME                                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                      AGE
argocd-applicationset-controller          ClusterIP   10.0.120.123   <none>        7000/TCP,8080/TCP            7m58s
argocd-dex-server                         ClusterIP   10.0.87.159    <none>        5556/TCP,5557/TCP,5558/TCP   7m57s
argocd-metrics                            ClusterIP   10.0.211.65    <none>        8082/TCP                     7m57s
argocd-notifications-controller-metrics   ClusterIP   10.0.36.208    <none>        9001/TCP                     7m56s
argocd-redis                              ClusterIP   10.0.234.25    <none>        6379/TCP                     7m55s
argocd-repo-server                        ClusterIP   10.0.144.79    <none>        8081/TCP,8084/TCP            7m54s
argocd-server                             NodePort    10.0.182.54    <none>        80:32541/TCP,443:30162/TCP   7m54s   now nodeport after switch
argocd-server-metrics                     ClusterIP   10.0.209.170   <none>        8083/TCP                     7m53s

ðŸ§© Step 5: Get the ArgoCD Admin Password
bash
Copy
Edit
kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 -d
Username: admin
Password: (output from above command)

ðŸ§© Step 6: Login to ArgoCD CLI (Optional)
bash
Copy
Edit
argocd login localhost:8080 --username admin --password <password> --insecure
ðŸ§© Step 7: Connect ArgoCD to a GitHub Repository
bash
Copy
Edit
argocd repo add https://github.com/<your-username>/<your-repo> --username <git-username> --password <git-password-or-token>
Alternatively, you can configure the repo in the UI under Settings â†’ Repositories

ðŸ§© Step 8: Create an ArgoCD Application (via CLI or YAML)
ðŸ‘‰ Option A: Apply via YAML
yaml
Copy
Edit
# app.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: demo-app
  namespace: argocd
spec:
  project: default
  source:
    repoURL: 'https://github.com/<your-username>/<your-repo>'
    targetRevision: HEAD
    path: k8s-manifests
  destination:
    server: 'https://kubernetes.default.svc'
    namespace: default
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
bash
Copy
Edit
kubectl apply -f app.yaml
ðŸ‘‰ Option B: Create via CLI
bash
Copy
Edit
argocd app create demo-app \
  --repo https://github.com/<your-username>/<your-repo> \
  --path k8s-manifests \
  --dest-server https://kubernetes.default.svc \
  --dest-namespace default \
  --sync-policy automated
ðŸ§© Step 9: Sync the Application
bash
Copy
Edit
argocd app sync demo-app
Or use the UI to Sync Now.

ðŸ§© Step 10: Optional â€“ Expose ArgoCD with Ingress or LoadBalancer (Production Use)
Update argocd-server service:

bash
Copy
Edit
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
Get External IP:

bash
Copy
Edit
kubectl get svc argocd-server -n argocd
Now access ArgoCD via:
https://<EXTERNAL-IP>


